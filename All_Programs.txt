//Final Value of Variable After Performing Operations
class Solution {
    public int finalValueAfterOperations(String[] operations) {
        int x = 0;
        for(String o : operations) x += (44 - o.charAt(1));
        return x;
    }
}


//Shuffle the Array
class Solution {
    public int[] shuffle(int[] nums, int n) {
        
        int len = nums.length;
		
		// to store the pair of numbers in right half of the original array
        for(int i = n; i < len; i++) {
            nums[i] = (nums[i] * 1024) + nums[i - n];
        }
        
        int index = 0;
		// to retrive values from the pair of numbers and placing those retrieved value at their desired position
        for(int i = n; i < len; i++, index += 2) {
            nums[index] = nums[i] % 1024;
            nums[index + 1] = nums[i] / 1024;
        }
        
        return nums;
    }
}


//Find Words Containing Character
class Solution {
    public List<Integer> findWordsContaining(String[] words, char x) {
        List<Integer>ans = new ArrayList<>();

        for(int i = 0; i < words.length; i++) {
            if(words[i].indexOf(x) != -1) ans.add(i);
        }

        return ans;
    }
}


//Largest Local Values in a Matrix
class Solution {
    public int[][] largestLocal(int[][] grid) {
        int n = grid.length;
        int[][] res = new int[n - 2][n - 2];

        for(int i = 1; i < n - 1; ++i) {
            for(int j = 1; j < n - 1; ++j) {
                int temp = 0;

                for(int k = i - 1; k <= i + 1; ++k) {
                    for(int l = j - 1; l <= j + 1; ++l) {
                        temp = Math.max(temp, grid[k][l]);
                    }
                }

                res[i - 1][j - 1] = temp;
            }
        }

        return res;
    }
}


//Richest Customer Wealth
class Solution {
    public int maximumWealth(int[][] accounts) {
        int res = 0;
        for(int i =0;i<accounts.length;i++){
            int temp = 0;
            for(int j = 0;j<accounts[i].length;j++){
                temp+=accounts[i][j];
            }
            res = Math.max(res,temp);
        }
        return res;
    }
}


//Sum of All Subset XOR Totals
class Solution {
    public int subsetXORSum(int[] nums) {
        int n = nums.length;
        int totalSum = 0;
        // Iterate through all possible subsets
        for (int i = 0; i < (1 << n); i++) {
            int subsetXor = 0;
            for (int j = 0; j < n; j++) {
                // Check if the j-th element is in the i-th subset
                if ((i & (1 << j)) != 0) {
                    subsetXor ^= nums[j];
                }
            }
            totalSum += subsetXor;
        }
        return totalSum;
    }
}


//Number of Employees Who Met the Target
class Solution {
    public int numberOfEmployeesWhoMetTarget(int[] hours, int target) {
        int cnt = 0; 
        for(var h : hours){
            if(h >= target)cnt++;
        }
        return cnt;
    }
}


//Widest Vertical Area Between Two Points Containing No Points
class Solution {
    public int maxWidthOfVerticalArea(int[][] points) {
        Arrays.sort(points, (p1, p2)->(p1[0]-p2[0]));
        int maxWidth = 0, sz = points.length;
        for(int indx = 0; indx < sz-1; indx++){
           int [] point1 = points[indx], point2 = points[indx+1]; 
           maxWidth = Math.max(maxWidth, point2[0] - point1[0]);
        }
        return maxWidth;
    }
}


//Kids With the Greatest Number of Candies
class Solution {
    public List<Boolean> kidsWithCandies(int[] candies, int extraCandies) {
        int maxCandies = 0;
        for (int candy : candies) {
            maxCandies = Math.max(maxCandies, candy);
        }
        
        List<Boolean> result = new ArrayList<>();
        
        for (int candy : candies) {
            if (candy + extraCandies >= maxCandies) {
                result.add(true);
            } else {
                result.add(false);
            }
        }
        
        return result;
    }
}


//Count Pairs Whose Sum is Less than Target
class Solution {
  int countPairs(List<int> nums, int target) {
    int result=0;
   for(int i=0;i<nums.length;i++){
    for(int j=i+1;j<nums.length;j++){
      if(nums[i]+nums[j]<target){
        result+=1;
      }
    }
   }
   return result;
  }
}


//How Many Numbers Are Smaller Than the Current Number
class Solution {
    public int[] smallerNumbersThanCurrent(int[] nums) {
        int max = -1;
        for(int num : nums){
            max = Math.max(max, num);
        }
        
        int[] count = new int[max + 1];
        for(int num : nums){
            count[num]++;
        }

        int[] prefix = new int[count.length + 1];
        for(int i = 1 ; i < prefix.length; i++){
            prefix[i] = prefix[i - 1] + count[i - 1];
        }

        int[] res = new int[nums.length];
        for(int i = 0 ; i < nums.length; i++){
            res[i] = prefix[nums[i]];
        }
        return res;
    }
} 


//Running Sum of 1d Array
class Solution {
    public int[] runningSum(int[] nums) {

        for(int i=1;i<nums.length;i++){
            nums[i]=nums[i-1]+nums[i];

        }
        return nums;
    }
}


//Maximum Number of Words Found in Sentences
class Solution {
    public int mostWordsFound(String[] sentences) {
        int k=0;
        for(int i=0;i<sentences.length;i++)
        {
            String[] str=sentences[i].split(" ");
            int n=str.length;
            if(n>k)
             k=n;
        }
        return k;
    }
}


//Sum of Values at Indices With K Set Bits
class Solution {
    public int sumIndicesWithKSetBits(List<Integer> nums, int k) {
        int res=0;
        for(int i=0;i<nums.size();i++) 
            if(countBits(i)==k) res+=nums.get(i);
        return res;
    }
    int countBits(int n) {
        int cnt=0;
        while(n!=0) {
            cnt+=(n&1);
            n=n>>1;
        }
        return cnt;
    }
}


//Decode XORed Array
class Solution {
    public int[] decode(int[] encoded, int first) {
        int n=encoded.length;
        int ans[]= new int[n+1];
        ans[0]=first;
        for(int i=0;i<n;i++){
            ans[i+1]=ans[i]^encoded[i];
        }
        return ans;
    }
}


//Left and Right Sum Differences
class Solution {
    public int[] leftRightDifference(int[] nums) {
        int n = nums.length;
        int [] leftSum = new int[n];
        int [] rightSum = new int [n];
        leftSum[0]=0;
        rightSum[n-1]=0;
        for(int i=1;i<n;i++){
            leftSum[i]=leftSum[i-1]+nums[i-1];
        }
        for(int i=n-2;i>=0;i--){
            rightSum[i]=rightSum[i+1]+nums[i+1];
        }
        int [] ans = new int[n];
        for(int i=0;i<n;i++){
            ans[i] = Math.abs(leftSum[i]-rightSum[i]);
        }
        return ans;
    }
}


//Create Target Array in the Given Order
class Solution {
    public int[] createTargetArray(int[] nums, int[] index) {
        int len = nums.length;
        ArrayList<Integer> targetList = new ArrayList<>();
        for(int i=0;i<len;i++){
            // Insert nums[i] at index[i] in targetList.
            targetList.add(index[i],nums[i]);  
        }
        int[] target = new int[len];
        for(int i=0;i<len;i++){
            // Convert ArrayList to integer array.
            target[i] = targetList.get(i);  
        }
        return target;
    }
}


//Decompress Run-Length Encoded List
class Solution {
    public int[] decompressRLElist(int[] nums) {
        ArrayList<Integer> ls = new ArrayList<>();
        int i=0;
        while(i<nums.length){
            for(int j=0;j<nums[i];j++){
                ls.add(nums[i+1]);
            }
            i+=2;
        }
        int[] ans = new int[ls.size()];
        for(int k=0;k<ans.length;k++){
            ans[k] = ls.get(k);
        }
        return ans;
    }
}


//Minimum Number Game
class Solution {
    public int[] numberGame(int[] nums) {
        Arrays.sort(nums);
        int [] arr = new int[nums.length];
        for(int i=0;i<nums.length;i++){
            if(i%2!=0){
                arr[i-1]=nums[i];
            }
            else{
                arr[i+1]=nums[i];
            }
        }
        return arr;
    }
}


//Check If Two String Arrays are Equivalent
class Solution:
    def arrayStringsAreEqual(self, word1: List[str], word2: List[str]) -> bool:
        return ''.join(word1) == ''.join(word2)


//Minimum Operations to Exceed Threshold Value I
class Solution {
    public int minOperations(int[] nums, int k) {
        int count=0;
        for(int i=0;i<nums.length;i++){
            if(nums[i]<k){
                count++;
            }
        }
        return count;
    }
}


// Truncate Sentence
class Solution {
    public String truncateSentence(final String s, final int k) {
        int count = 0, idx = 0;

        while(idx < s.length() && count < k)
            if(s.charAt(idx++) == ' ')
                count++;

        return s.substring(0, idx == s.length() ? idx : idx - 1);
    }
}